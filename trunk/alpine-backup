#!/usr/bin/php
<?php
#alp: alpine-backup Proto6
#(C) Copyright 2007-2011 Nicholas Paun. All Rights Reserved.
/*Knut 061*/


define('OPTIONS','-av');
define('DATE_FORMAT','Y-m-d');
define('INCLUDE_PATH','/usr/lib/alpine-backup/');
define('CONFIG_PATH','/etc/alpine-backup/');

if (@$argv[1] == "-h")
 {
  echo("alpine-backup Version: 0.62\n");
  echo("Syntax: ".$argv[0]." <server> <item>\n");
  echo("Copyright 2007-2011 Nicholas Paun\n");
  die(0);
 }

if($argc < 2 || $argc > 4)
 {
  echo("Invalid number of arguments. Try ".$argv[0]." -h for more info.\n");
  die(3);
 }

$conf = parse_ini_file(CONFIG_PATH.$argv[1],TRUE);
$item = $argv[2];

if (isset($argv[3])) #Third argument is master server
 $sync = $argv[3];
else
 $sync = FALSE;

if (!isset($conf["$item"]))
 {
  echo("* Cannot backup $item on ".$argv[1].": Invalid backup item.\n");
  die(3);
 }

echo("* Backing up $item on ".$argv[1].".\n");

function mount_roo($data,$umount=FALSE)
 {
  @list($type,$src,$point) = explode(",",$data);
  list($user,$host) = explode("@",$src);
  list($server,$volume) = explode(":",$host);

  require_once(INCLUDE_PATH."$type-roo"); //Loads by filesystem
  
  if (!$umount) 
   {
    $return = mountfs($user,$server,$volume,$point);
    if (!$return)
     {
      echo("* Failed to mount $volume: mount script unsuccessful.\n");
      die(2);
     }
    }
  else
  {
   $return = umountfs($user,$server,$volume,$point);
   if (!$return) echo("* WARNING: Could not unmount $volume.\n");
  }
 }

function delete_old_scan($dest,$keep)
 {
  $dir = scandir("$dest/"); #Load directory as array
  $delete_after = strtotime($keep." ago"); #Convert config option to unix time

  echo("* Date $keep ago was ".date(DATE_FORMAT,$delete_after).".\n");

  foreach($dir as $i => $file)
   {
    $unix = strtotime($file); #Convert directory name to unix time

    if ($unix !== FALSE && $file != '.' &&  $file != '..') #Remove bogus entries
      $internal["$unix"] = $file;
   }

  ksort($internal); # Sort the array

  foreach($internal as $stamp => $file)
   {
    if ($stamp <= $delete_after) #If the file timestamp is lower than the threshold
     {
      /* echo("Delete: $dest/$file\n"); */ #Debugging
      passthru("rm -r $dest/$file"); 
     }
   }
 }


function link_check($dest,$name)
 {
  if (is_link("$dest/current"))
   {
    $link = @readlink("$dest/current"); #Find where the link is pointing to
    if (!file_exists($link))
     {
      echo("* Backup Failure ($name): The current symlink points to a non-existent location.\n");
      die(4);
     }
   }
 }


function wrapper($conf,$item)
 {
  $date = date(DATE_FORMAT);
  extract($conf["$item"]); #Simplifies variables

  if (isset($mount))
    mount_roo($mount); #Mount


  passthru("mkdir -p $dest"); #Auto-create destination directory structure (mkdir() creates one level)
  link_check($dest,$item); #Check for invalid link-dests

  $flag = backup(@$opt,$source,$dest,$date,$item); #Hold errors until cleanup is done

  if (isset($mount))
   mount_roo($mount,TRUE); #Unmount
 
 if (isset($delete_after))
   delete_old_scan($dest,$delete_after); #Remove old backups
  
  if ($flag == FALSE)
    die(1); #Return exit code for bad backup
   
 }

function backup($opt,$src,$dest,$date,$name)
 {
  $_opt = OPTIONS;
  passthru("rsync $_opt $opt --link-dest $dest/current $src $dest/$date",$return);
 
  if ($return != 0)
    {
     echo("* Backup Failure ($name): rsync did not finish successfully.\n");
     return(FALSE);
    }  

  unlink("$dest/current");
  symlink("$dest/$date","$dest/current");
  echo("* Backup Successful: $name\n");
 
  return(TRUE);
 }

wrapper($conf,$item);

